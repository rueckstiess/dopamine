Test Environment class from environments.environment
=====================================================================


Test import and class initial conditions
---------------------------------------------------------------------
>>> from dopamine.environments.environment import Environment
>>> e = Environment()
>>> e.conditions
{'episodic': False, 'discreteStates': False, 'discreteActions': False, 'stateNum': inf, 'stateDim': 0, 'actionDim': 0, 'actionNum': inf}


Test state, action, reward cycle
---------------------------------------------------------------------
>>> e.getState()
array([], dtype=float64)
>>> e.progressCnt
1
>>> e.getState()
Traceback (most recent call last):
	...
EnvironmentException: state was requested twice before action was given.

>>> e.performAction([])
>>> e.progressCnt
2
>>> e.performAction([])
Traceback (most recent call last):
	...
EnvironmentException: action was given twice, before reward was requested.

>>> e.getReward()
0
>>> e.progressCnt
0
>>> e.getReward()
Traceback (most recent call last):
	...
EnvironmentException: reward was requested before action was performed.


Test episodeFinished and reset functions
---------------------------------------------------------------------
>>> e.episodeFinished()
False
>>> e.getState()
array([], dtype=float64)
>>> e.progressCnt
1
>>> e.timestep
1
>>> e.reset()
>>> e.progressCnt
0
>>> e.timestep
0
